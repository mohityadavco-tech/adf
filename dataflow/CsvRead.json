{
	"name": "CsvRead",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "csvfilesource",
						"type": "DatasetReference"
					},
					"name": "CSV"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlServer",
						"type": "DatasetReference"
					},
					"name": "SQL"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlServer",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlServer",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "Insert"
				},
				{
					"name": "SELECTCSV"
				},
				{
					"name": "SourceHash"
				},
				{
					"name": "lookup"
				},
				{
					"name": "split1"
				},
				{
					"name": "UpdateDate"
				},
				{
					"name": "Update"
				},
				{
					"name": "InsertDate"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ProductId as string,",
				"          ProductName as string,",
				"          Price as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CSV",
				"source(output(",
				"          Id as long,",
				"          ProductId as string,",
				"          ProductName as string,",
				"          Price as string,",
				"          HashKey as string,",
				"          InsertedDate as timestamp,",
				"          UpdatedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SQL",
				"InsertDate alterRow(insertIf(true())) ~> Insert",
				"CSV select(mapColumn(",
				"          ProductId,",
				"          ProductName,",
				"          Price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SELECTCSV",
				"SELECTCSV derive(SourceCSVHash = sha1(ProductId,ProductName,Price)) ~> SourceHash",
				"SourceHash, SQL lookup(SELECTCSV@ProductId == SQL@ProductId,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup",
				"lookup split(isNull(SQL@ProductId),",
				"     !isNull(SELECTCSV@ProductId) && notEquals(SourceCSVHash, HashKey),",
				"     disjoint: false) ~> split1@(NewRecord, Update)",
				"split1@Update derive(UpdateDate = currentDate()) ~> UpdateDate",
				"UpdateDate alterRow(updateIf(true())) ~> Update",
				"split1@NewRecord derive(InsertDate = currentDate()) ~> InsertDate",
				"Insert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          ProductId as string,",
				"          ProductName as string,",
				"          Price as string,",
				"          HashKey as string,",
				"          InsertedDate as timestamp,",
				"          UpdatedDate as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ProductId = split1@NewRecord@ProductId,",
				"          ProductName = split1@NewRecord@ProductName,",
				"          Price = split1@NewRecord@Price,",
				"          HashKey = SourceCSVHash,",
				"          InsertedDate = InsertDate",
				"     )) ~> sink1",
				"Update sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          ProductId as string,",
				"          ProductName as string,",
				"          Price as string,",
				"          HashKey as string,",
				"          InsertedDate as timestamp,",
				"          UpdatedDate as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['ProductId'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ProductId = split1@Update@ProductId,",
				"          ProductName = split1@Update@ProductName,",
				"          Price = split1@Update@Price,",
				"          HashKey = SourceCSVHash,",
				"          UpdatedDate = UpdateDate",
				"     )) ~> sink2"
			]
		}
	}
}